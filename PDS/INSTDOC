   ----------------------------------------------------------------
   12/12/00  1.0    written                                     AWR
   27/12/00  1.1    INSTSTR added                               AWR
   27/12/01  1.2    INSTLXSV, INSTTCMD, added                   AWR
   27/12/02  1.3    INSTPRS added                               AWR
   17/05/03  1.4    INSTGET,INSTSET, INSTUJI added              AWR
   17/12/03  1.5    INSTWTL                                     AWR
   01/01/04  1.6    INSTNUM                                     AWR
   09/09/04  1.7    INSTPDSL                                    AWR
   ----------------------------------------------------------------




    Macros and routines in INSTASM
    ------------------------------

    These are for use in system exits and reentrant assembler programs.

    They create REENTRANT code, which can run in AMODE 31 or 24.

    I have used them in system exits, for example IEFUJV




    For examples of their use, see the INSTIVP program




    Macros
    ------


      1)  INSTSS       -  Entry of reentrant module.  Getmains Save
                          area and Working Storage in dsect defined by
                          INSTWORK START.  Getmain is below the line to
                          allow for possible AMODE 24 running.


      2)  INSTRS       -  Exit of reentrant module.  Freemains Save
                          area and Working Storage.


      3)  INSTWORK     -  Defines  Working Storage - R/W area of module
                          with save area at start.

                          Use these three together thus:


                          name   INSTSS
                                     ...
                                   (code)
                                     ...
                                     ...

                                 INSTRS

                                     ...
                                   (read-only data)
                                     ...
                                     ...
                                 LTORG

                                 INSTWORK START

                                     ...
                                   (read-write data)
                                     ...
                                     ...

                                 INSTWORK END

                                   (Other dsects)

                                 END


                          Standard register use is that R12 is base
                          register for the module, R13 for the working
                          storage.


                          If you do not require a save area use

                              INSTSS SAVEAREA=NO

                          INSTSS will do no getmain and
                          INSTRS will do no freemain.

                         (You cannot use INSTWORK, INSTSTR, INSTPRS or
                          INSTBALI/O)


      4)  INSTBALI/O   -  Procedure entry/exit macro - supports
                          procedures that can be invoked from other
                          parts of the program by a

                            BAL R1,procedure_name

                          Invocations can be nested to any depth. Return
                          addresses are held in cells automatically
                          generated by INSTWORK

                          You must use INSTSS, INSTRS and INSTWORK to
                          use INSTBALI/O


      5)  INSTREQU     -  R0 EQU 0
                          R1 EQU 1
                          R2 EQU 2
                          . . . . .
                          etc . . .


                          Not a complicated macro!



      6)  INSTSTR      -  STRING FIELDS TOGETHER INTO A RECEIVING
                          FIELD.


                          INSTSTR  F1,F2,F3.... RES=R

                          Fn  May be


                             -  A literal  ' HI THERE '

                             -  A field name

                             -  A number.  This number of spaces
                                are inserted

                             -  *+number.  Reposition to this number
                                of spaces from start of receiving
                                field

                             -  A formatted field. Fields may be
                                formatted as numeric or hex

                                for example


                                  (fieldname,X) - hex

                                  (fieldname,N) - numeric.  Packed,
                                                  binary fields are
                                                  suitably interpreted

                                  (fieldname,N,12) - numeric, left
                                                     just to 12 bytes

                             -  A register, in brackets.  Registers can
                                be formatted as hex or numeric, like
                                fields


                          For examples, see INSTIVP



                          The "corruptible" registers R14-R1 are saved
                          before INSTSTR starts and the saved version
                          is what is displayed



                          INSTSTR requires INSTWORK.



                ** NOTE   Also if you use it you must include a

                            COPY INSTSTRC

                          at the end of your deck.  INSTSTRC is a
                          auxillary routine needed for INSTSTR
                          (You may at your discretion assemble INSTSTRC
                          to object code and include it at linkedit
                          time)


      7)  INSTPRS      -  PARSE A FIELD INTO SUBFIELDS


                          INSTPRS  FIELD,RES=(RES1,RES2,RES3),DLM=','

                          FIELD is a field containing data

                          RES1, RES2, RES3 . . .  (up to 30) are
                          receiving fields where the parsed results
                          will be placed left-justified

                          DLM is a set of delimiter characters.  There
                          may be more than one, but if so the single
                          characters are (all) used as delimiters.  You
                          cannot specify a string.

                          Leading delimiters in FIELD are ignored.

                          INSTPRS requires INSTWORK.


      8)  INSTNUM      -  GET THE NUMERIC VALUE OF A CHAR STRING


                          INSTNUM  FIELD

                          A very simple macro to read a number
                          freeformat.  The field must be an optional
                          string of blanks followed by a string of
                          digits and an optional string of blanks.
                          That is to say, it is a line with a number in
                          it somewhere, not necessarily at the start.

                          On exit, R1 holds the parsed out numeric
                          value and R15 is 0 if all valid or 4 if
                          format error.




    Callable routines
    -----------------


      1)  INSTDTID     -  CALLable routine to convert from ISO date
                          YYYY-MM-DD to and from a fullword
                          (DAYS_SINCE_1_JAN_1_AD+1).

                          This number is is of course meaningless
                          before the date adjustments of the middle
                          ages, so it is best defined as

                           01.01.2000 = 730120


      2)  INSTWTOR     -  CALLable routine to do WTOs and WTORs with a
                          100 byte message - abrogates need to
                          construct reentrant WTORs and WTOs in exits

      3)  INSTCNVX     -  CALLable routine to convert a string to hex

      4)  INSTSTRC     -  Auxillary needed for INSTSTR macro

      5)  INSTPRSE     -  Auxillary needed for INSTPRS macro

      6)  INSTGET      -  See the INSTSET/INSTGET section

      7)  INSTWTL      -  Sample routine to do a WTL, adding a time
                          stamp and job name stamp.




    All these may be assembled to object form and included at linkedit
    time at your discretion





    Utilities
    ---------


      1)  INSTLXSV     -  A sample PANEL exit.  We use this to feed
                          system variables through to ISPF panels

      2)  INSTTCMD     -  A sample batch program to issue commands.
                          This should be RACF-protected

      3)  INSTSET      -  See the INSTSET/INSTGET section

      4)  INSTPDSL     -  A sample subroutine used to get the listing of
                          a PDS or PDSE









    INSTSET/INSTGET Installation
    ----------------------------


    The batch program INSTSET, the SMF exit INSTUJI, and the routine
    INSTGET, form a connected subset of utilities



    INSTSET is used to create a "string" for a job.  The string is held
    name/token pairs.

    The string is as it were a global "environment variable" readable
    by subsequent programs in the job.

    The programs read it by calling INSTGET.  INSTGET returns a halfword
    prefixed string in a buffer provided by the calling program.

    INSTUJI is used to pre-clean out the name/token pairs before a job
    runs.  This exit must be added to the SMF IEFUJI list in PROGXX



    To install these utilities:


    1) Modify and run INSTNT01.   INSTUJI must be in a linklist
       library.  INSTSET must be in an authorised library.  Here I put
       them both in SYS1.LINKLIB


    2) F LLA,REFRESH


    3) Include in a PROGXX member

       EXIT ADD    EXITNAME(SYS.IEFUJI) MODNAME(INSTUJI)


    4) Issue   SET PROG=xx    (whatever xx is)


    5) Run the IVP program INSTNT02


    6) At your discretion compile INSTGET to object code form so it
       can be called by HLL programs

