****************************************************************
*
*   SUBROUTINE TO GET LIST OF MEMBERS IN LIBRARY
*   RETURNS UP TO 20000 MEMBERS + LAST ONE BLANK
*   AND NUMBER OF MEMBERS
*
*   ASSUMES :  DDNAME IS ALLOCATED TO LIBRARY
*              LIBRARY IS PO
*
*
*   RC = 0  OK
*      = 4  OVERFLOW OR NO MEMBERS IN LIBRARY
*      > 4  SERIOUS ERROR
*
****************************************************************
INSTPDSL INSTSS
         LM    R4,R6,0(R1)
         L     R11,12(R1)
         USING DDNAME,R4
         USING MEMNAME,R5
         USING SLOTNO,R6
         USING MEMNO,R11

         MVC   MEMNO,=A(0)

         MVI   OVERFLOW,C'N'

         MVC   R_DCB(R_DCB_Z-R_DCB),T_DCB
         MVC   R_OPEN(R_OPEN_Z-R_OPEN),T_OPEN
         MVC   R_CLOSE(R_CLOSE_Z-R_CLOSE),T_CLOSE
         MVC   R_DESERV(R_DESERV_Z-R_DESERV),T_DESERV

         LA    R10,R_DCB
         USING IHADCB,R10

         MVC   DCBDDNAM,DDNAME

         CLOSE ((R10)),MF=(E,R_CLOSE)
         OPEN  ((R10)),MF=(E,R_OPEN)
         LTR   R15,R15
         BNZ   RET12

* DO A DESERV ON THIS DDNAME

         DESERV FUNC=GET_ALL,DCB=((R10)),                              X
               AREAPTR=R_APTR,MF=(E,R_DESERV)
*1       JLPTRACE ((R15),X),((R0),X),(R_APTR,X)

* EMPTY LIBRARY?

         C     R15,=A(8)
         BNE   NOT_NOMEM
         N     R0,=A(X'0000FFFF')
         CH    R0,=Y(X'3F4')
         BNE   NOT_NOMEM

         CLOSE ((R10)),MF=(E,R_CLOSE)
         B     RET4
NOT_NOMEM DS  0H

*1_II    JLPTRACE ((R15),X),((R0),X),(R_APTR,X)

         LTR   R15,R15
         BNZ   RET12

         L     R7,R_APTR
         USING DESB,R7


         LA    R1,0
         ST    R1,MEMNO
ONE_DESB_LOOP  DS   0H
         LTR   R7,R7
         BZ    ONE_DESB_LOOP_END
         CLC   =CL8'IGWDESB',DESB_ID
         BNE   RET12

*T2       JLPTRACE  DESB_FIXED,(DESB_FIXED,X),
*               (DESB_NEXT,X),
*               (DESB_COUNT,X),
*               (DESB_LEN,X),
*               (DESB_SUBPOOL,X),
*               (DESB_GAP_LEN,X),
*               (DESB_DATA,,100),
*               (DESB_DATA,X,40)





         LA    R8,DESB_DATA
         USING SMDE,R8


         LA    R1,0
         ST    R1,W_SMDE_COUNT


ONE_SMDE_LOOP  DS   0H
         L     R1,W_SMDE_COUNT
         C     R1,DESB_COUNT
         BNL   ONE_SMDE_LOOP_END

         CLC   =CL8'IGWSMDE',SMDE_ID
         BNE   RET12

*        MVC    D,0(R8)
*T21 JLPTRACE ((R8),X),D1,(D1,X),D2,(D2,X),D3,(D3,X),D4,(D4,X)

         CLI   SMDE_LIBTYPE,SMDE_LIBTYPE_PDS
         BNE   SMDE_NOT_PDS
         LH    R1,SMDE_NAME_OFF
         LA    R1,0(R1,R8)
         USING SMDE_NAME,R1

         L     R0,MEMNO
         C     R0,SLOTNO
         BNL   SMDE_PDS_TOO_MANY
         A     R0,=A(1)
         ST    R0,MEMNO
         MVC   MEMNAME,SMDE_NAME_VAL
         LA    R5,L'MEMNAME(R5)
         B     SMDE_PDS_ROOM
SMDE_PDS_TOO_MANY DS 0H
         MVI   OVERFLOW,C'Y'
SMDE_PDS_ROOM DS 0H
         DROP  R1

         B     SMDE_PROCESSED
SMDE_NOT_PDS  DS    0H

         CLI   SMDE_LIBTYPE,SMDE_LIBTYPE_PDSE
         BNE   SMDE_NOT_PDSE
         LH    R1,SMDE_NAME_OFF
         LA    R1,0(R1,R8)
         USING SMDE_NAME,R1

         L     R0,MEMNO
         C     R0,SLOTNO
         BNL   SMDE_PDSE_TOO_MANY
         A     R0,=A(1)
         ST    R0,MEMNO
         MVC   MEMNAME,SMDE_NAME_VAL
         LA    R5,L'MEMNAME(R5)
         B     SMDE_PDSE_ROOM
SMDE_PDSE_TOO_MANY DS 0H
         MVI   OVERFLOW,C'Y'
SMDE_PDSE_ROOM DS 0H
         DROP R1


         B     SMDE_PROCESSED
SMDE_NOT_PDSE DS    0H
         B     RET12
SMDE_PROCESSED DS    0H


*T211    JLPTRACE  W_NAME,(W_NAME,X)

* SKIP UP TO NEXT SMDE

         A     R8,SMDE_LEN

         L     R1,W_SMDE_COUNT
         LA    R1,1(R1)
         ST    R1,W_SMDE_COUNT
         B     ONE_SMDE_LOOP
ONE_SMDE_LOOP_END  DS   0H


         DROP  R8




*        FREEMAIN EACH DESB ENTRY AS DONE

         L     R1,DESB_NEXT
         ST    R1,W_DESB_NEXT
         L     R3,DESB_LEN
         SLR   R2,R2
         ICM   R2,8,DESB_SUBPOOL
         FREEMAIN RC,A=(R7),SP=(R2),LV=(R3)
*T22      JLPTRACE ((R15),X),((R0),X)

         L     R7,W_DESB_NEXT
         B     ONE_DESB_LOOP
ONE_DESB_LOOP_END  DS   0H
         DROP  R7
         MVC   MEMNAME,=CL8' '




         CLOSE ((R10)),MF=(E,R_CLOSE)
*3       JLPTRACE ((R15),X),((R0),X)
         LTR   R15,R15
         BNZ   RET12
         B     RET0

RET0     EQU   *
         CLI   OVERFLOW,C'Y'
         BE    RET4
         INSTRS RC=0

RET4     EQU   *
         INSTRS RC=4


RET12    EQU   *
         CLOSE ((R10)),MF=(E,R_CLOSE)
         INSTRS RC=12

         LTORG

*TEMPLATES
         DS   0D
T_DCB    DCB                                                           X
               DDNAME=XXXXXXXX,                                        X
               MACRF=R,                                                X
               DSORG=PO
T_DCB_Z  DS       0D

         DS   0D
T_DESERV DESERV FUNC=GET_ALL,DCB=T_DCB,AREAPTR=T_APTR,MF=L
T_DESERV_Z DS 0D

         DS   0D
T_APTR   DS 0A

         DS   0D
T_OPEN   OPEN  (T_DCB),MF=L
T_OPEN_Z DS   0D

         DS   0D
T_CLOSE  CLOSE (T_DCB),MF=L
T_CLOSE_Z DS 0D


         INSTWORK  START


*REAL CONTROL BLOCKS
         DS   0D
R_DCB    DCB                                                           X
               DDNAME=XXXXXXXX,                                        X
               MACRF=R,                                                X
               DSORG=PO
R_DCB_Z     DS   0D

         DS   0D
R_OPEN   OPEN  (T_DCB),MF=L
R_OPEN_Z DS   0D

         DS   0D
R_CLOSE  CLOSE (T_DCB),MF=L
R_CLOSE_Z DS 0D

         DS   0D
R_DESERV DESERV FUNC=GET_ALL,DCB=T_DCB,AREAPTR=T_APTR,MF=L
R_DESERV_Z DS 0D

         DS   0D
R_APTR   DS  A  ADDRESS RETURNED BY DESERV


W_SMDE_COUNT  DS F
W_DESB_NEXT   DS A
W_NAME        DS CL16
OVERFLOW      DS  C

*
*  D DS          CL120
*            ORG  D
*  D1        DS  CL30
*  D2        DS  CL30
*  D3        DS  CL30
*  D4        DS  CL30
*            ORG


         INSTWORK  END

         IGWDES
         IGWSMDE

         DCBD  DSORG=PO

DDNAMEDS DSECT
DDNAME   DS  CL8

MEMNAMEDS DSECT
MEMNAME  DS  CL8

MEMNODS DSECT
MEMNO    DS  A

SLOTNOX DSECT
SLOTNO   DS  A


         END
